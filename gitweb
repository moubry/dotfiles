#!/usr/bin/env ruby

###
# When you run this command-line program `gitlab` from inside a Git
# repository that is hosted on GitLab, then it will open your web browser to
# various GitLab URLs depending your context.
#
# For example, let's say you have a project named `stid/gps-api`, and you've
# checked out master, and execute `gitlab`, then your browser will open to the
# root of that project:
#
#   $ git checkout master
#   $ gitlab
#     ^ Opens: https://gitlab.sd.apple.com/stid/gps-api
#
# However, if you've checked out a specific branch, then it'll take you straight
# to that branch:
#
#   $ git checkout system-status-page
#   $ gitlab
#     ^ Opens: https://gitlab.sd.apple.com/stid/gps-api/tree/system-status-page
#
# And, if you pass-in a commit hash as an argument, it'll open to that commit:
#
#   $ gitlab 93f7afb7
#     ^ Opens: https://gitlab.sd.apple.com/stid/gps-api/commit/93f7afb7

require 'logger'
require 'uri'

@logger = Logger.new(STDOUT)

unless system('git rev-parse --is-inside-work-tree > /dev/null')
  @logger.error 'Not a Git repository.'
  exit
end

if (commit_hash = ARGV[0])
  @logger.debug "Commit hash:  #{commit_hash}"
end

origin_remote_url = `git config --get remote.origin.url`.strip
@logger.debug "Remote URL:   #{origin_remote_url}"

website_url = origin_remote_url.match('^git@(.*):')[1]
@logger.debug "GitLab host:  #{website_url}"

account_name = origin_remote_url.match(':(.*)\/')[1]
@logger.debug "Account name: #{account_name}"

project_name = origin_remote_url.match('\/(.*).git$')[1]
@logger.debug "Project name: #{project_name}"

branch_name = `git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3`.strip
@logger.debug "Branch name:  #{branch_name}"

project_url = URI.join "https://#{website_url}",
                       "/#{account_name}/",
                       project_name.to_s

@logger.debug "Project URL:  #{project_url}"

url_to_open = project_url

if commit_hash
  url_to_open = URI.join("#{project_url}/", "commit/#{commit_hash}")
  @logger.debug "Commit URL:   #{url_to_open}"
elsif branch_name && branch_name != 'master'
  url_to_open = URI.join("#{project_url}/", "tree/#{branch_name}")
  @logger.debug "Branch URL:   #{url_to_open}"
end

@logger.debug "Opening URL:  #{url_to_open}"
`open '#{url_to_open}'`

export EDITOR=nvim
export LANG="en_US.UTF-8"

# for homebrew
export PATH=/usr/local/sbin:$PATH
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
eval "$(/opt/homebrew/bin/brew shellenv)"

# for GNU versions of tools (coreutils and sed)
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

# for compilers to find curl
export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
export CPPFLAGS="-I/opt/homebrew/opt/curl/include"

# for pkg-config to find curl
export PKG_CONFIG_PATH="/opt/homebrew/opt/curl/lib/pkgconfig"

# for zoxide (fast directory jumping)
eval "$(zoxide init zsh)"

# for node
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Automatically switch the version of Node depending on `.nvmrc` existance.
# https://github.com/nvm-sh/nvm?tab=readme-ov-file#zsh
autoload -U add-zsh-hook
load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Automatically switch the version of Node depending on `.node-version`.
cd() {
  builtin cd "$@"
  if [[ -f .node-version ]]; then
    nvm use $(cat .node-version) > /dev/null
  fi
}

# for ruby
export RBENV="$HOME/.rbenv/bin"
eval "$(rbenv init -)"
export PATH=$RBENV:$PATH

# for python
export PYENV="$HOME/.pyenv/bin"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
export PATH=$PYENV:$PATH

# for go
mkdir -p $HOME/go/bin
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH

# for hbase
export HBASE_HOME=/usr/local/Cellar/hbase/1.2.6/libexec
export PATH=$HBASE_HOME:$PATH

add_to_path() {
  export PATH="$1:$PATH"
}

# for android
export ANDROID_HOME=$HOME/Library/Android/sdk
add_to_path $ANDROID_HOME/tools
add_to_path $ANDROID_HOME/tools/bin
add_to_path $ANDROID_HOME/platform-tools
add_to_path $ANDROID_HOME/emulator
add_to_path $ANDROID_HOME/cmdline-tools/latest/bin

# for java (for android)
# export JAVA_HOME=$(brew --prefix openjdk)
# https://stackoverflow.com/a/64389804/369669
# export STUDIO_JDK="/Applications/Android Studio.app/Contents/jbr/Contents/Home"
# export JAVA_HOME=$STUDIO_JDK
# export PATH=$JAVA_HOME/bin:$PATH

# for dart and flutter
export DART=$HOME/.pub-cache/bin
export PATH=$DART:$PATH
[[ -f ~/.dart-cli-completion/zsh-config.zsh ]] && . ~/.dart-cli-completion/zsh-config.zsh || true

# export FLUTTER="$HOME/Developer/flutter/bin"
# export PATH=$FLUTTER:$PATH

# for dotfiles
export PATH=~/bin:$PATH

##########################
# Setup the prompt for ZSH
# https://www.themoderncoder.com/add-git-branch-information-to-your-zsh-prompt/

# Load version control information
autoload -Uz vcs_info
precmd() { vcs_info }

# Format the vcs_info_msg_0_ variable
zstyle ':vcs_info:git:*' formats ' on %b'

# Set up the prompt (with git branch name)
setopt PROMPT_SUBST
PROMPT='${PWD/#$HOME/~}${vcs_info_msg_0_} $ '

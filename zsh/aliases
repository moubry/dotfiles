# Easier navigation
alias ..="cd .."

# Directory listing
alias la="ls -Glah"
alias lsd='ls -l | grep "^d"'

# History
alias h=history

# Open the dotfiles project (this project)
alias dotfiles='cd ~/Projects/dotfiles; github; code .'
alias secrets='vi ~/Projects/dotfiles/zsh/secrets'
alias worklog='vi ~/worklog'
alias aliases='cat ~/Projects/dotfiles/zsh/aliases | grep alias'

# Git
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba="git branch -a | grep -v 'heroku\|orchard\|production\|uat\|sandbox'"
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --color=always --abbrev-commit --date=relative"
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff main'
alias gnp="git-notpushed"
alias gp='git push'
alias gpom='git push -u origin main'
alias gr='git remote -v'
alias gst='git status'
alias gt='git status'
alias g='git status'

# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Search Git commit diffs across all branches
function gs() {
  git log --branches -S $1
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# Quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin main
  git config branch.main.remote origin
  git config branch.main.merge refs/heads/main
  git config push.default current
}

# GTFO of whatever you're on
function eject() {
  git clean -df
  git checkout -- .
  git fetch -ap
  git checkout main
  git reset --hard origin/main
}

# Deploy a feature branch to an environment branch on a team that uses GitOps.
# Usage: release add-linking production
function release() {
  gl origin/$2 | head
  kpods
  git push --force origin $1:$2
  gl origin/$2 | head
  bin/rio
}

# Kube
alias kpods='kubectl get pods'
alias ksecrets='kubectl get secrets'

# Kube - Grab the first pod in the current namespace and shell into it.
# Usage: kssh web
alias kssh='kbash'
function kbash() {
  container=$(kubectl get pods | sed '1d' | awk '{print $1}' | head -n 1)
  kubectl exec --stdin --tty $container -- /bin/bash
}

# Kube - Switch to a different namespace
function kswitch() {
  namespace=$1; kubectl config set-context --current --namespace=$namespace
}

# Kube - Print out the value of a secret.
function ksecret() {
  kubectl get secret $1 -o jsonpath="{.data.$1}" | base64 -d
}

# Kube - Set a secret.
function kcreatesecret() {
  kubectl delete secret $1
  kubectl create secret generic $1 --from-literal=$1="$2"
}

# Kube - Shell into a running pod.
# https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/
function kssh() {
  kubectl exec --stdin --tty $1 -- /bin/bash
}

# Find all text/pattern in every file in current directory hierarchy
function fa() {
  grep -rnw . -e $1
}

# recursively find file or directory
function search() {
  find . | grep -i $1
}

# Performance
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias whois="whois -h whois-servers.net"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Fancy cURL that shows detailed timing information
# Source: https://josephscott.org/archives/2011/10/timing-details-with-curl/
# Usage:
#     $ curltime "http://moubry.com"
function curltime() {
  curl -w "@/Users/sean/Projects/dotfiles/curl-format" -o /dev/null -s "$1"
}

# Open Chrome using all the known flags for turning off security, CORS, etc.
alias badchrome="open -a Google\ Chrome --args --disable-web-security --user-data-dir --ignore-certificate-errors --unsafely-treat-insecure-origin-as-secure --allow-file-access-from-files"

# Memcached
alias memdump="memcached-tool localhost:11211 dump"

# Tail logs
alias accesslog="tail /var/log/apache2/access_log"
alias errorlog="tail /var/log/apache2/error_log"
alias tailpg="tail -f /usr/local/var/log/postgres.log"
alias logs="ls -lah /usr/local/var/log"

function pginfo() {
  brew services list
  tail /usr/local/var/log/postgres.log
}

function pgkill() {
  pginfo
  pkill -f postgres
  rm /usr/local/var/postgres/postmaster.pid
  brew services list
  pginfo
}

# Empty the trash
alias emptytrash="rm -rfv ~/.Trash"

# Launch iPhone Simulator
alias iphone='/usr/bin/open "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app"'

# Xcode development aliases
alias cart='carthage bootstrap --use-xcframeworks --no-use-binaries --platform ios'
alias cartup='carthage update --use-xcframeworks --no-use-binaries --platform ios'
alias dderived='rm -rf ~/Library/Developer/Xcode/DerivedData'
alias xcodereset='rm -rf Carthage; dderived; cart; xocde build'

# Opens a man (manual page) in Preview (like a PDF)
#   Written by https://github.com/tamalw
function pman {
  man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Output the directories in the path on new lines
alias path='echo $PATH | tr ":" "\n"'

function enable_dark_mode() {
  defaults write "/Applications/${1}.app/Contents/Info.plist" NSRequiresAquaSystemAppearance false
}
function disable_dark_mode() {
  defaults delete "/Applications/${1}.app/Contents/Info.plist" NSRequiresAquaSystemAppearance
}

function hide_desktop() {
  defaults write com.apple.finder CreateDesktop false
  killall Finder
}

function show_desktop() {
  defaults write com.apple.finder CreateDesktop true
  killall Finder
}
